package MyLibrary;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * The interface Panel for Browsing the Library. Also offers access to several
 * other features.
 * @author Bryan Fulton
 */
public class BrowsePanel extends javax.swing.JPanel {

    private DefaultListModel titlesListModel = new DefaultListModel();
    private DefaultListModel authorsListModel = new DefaultListModel();
    private LibraryFrame frame;
    
    /**
     * Creates a new Browse Panel.
     * Requires a reference to the containing Frame to function properly.
     * @param frame The frame containing this Panel
     */
    public BrowsePanel(LibraryFrame frame) {
        initComponents();
        this.frame = frame;
        titleList.setModel(titlesListModel);
        authorList.setModel(authorsListModel);
    }

    /**
     * Loads the lists of Book information to be browsed.
     * @param titles An ArrayList<String> of all Book titles.
     * @param authors An ArrayList<String> of all Book authors.
     */
    public void loadLists(ArrayList<String> titles, ArrayList<String> authors) {
        clearLists();
        
        for (String str: titles) {
            titlesListModel.addElement(str);
        }
        
        for (String str: authors) {
            authorsListModel.addElement(str);
        }
    }
    
    /**
     * Retrieves the currently selected index of the Lists.
     * @return The List's currently selected index.
     */
    public int getCurIndex() {
        return titleList.getSelectedIndex();
    }
    
    /**
     * Clears both lists. Used when refreshing them.
     */
    public void clearLists() {
        titlesListModel.clear();
        authorsListModel.clear();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sortByButtonGroup = new javax.swing.ButtonGroup();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        titleListScrollPane = new javax.swing.JScrollPane();
        titleList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        bookTitleLabel = new javax.swing.JLabel();
        authorListScrollPane = new javax.swing.JScrollPane();
        authorList = new javax.swing.JList();
        browseButtonPanel = new javax.swing.JPanel();
        informationButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        sortByTitleRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        sortByAuthorRadioButton = new javax.swing.JRadioButton();
        addButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(847, 358));
        setLayout(new java.awt.GridBagLayout());

        titlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        titleLabel.setText("Your Library");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 831, Short.MAX_VALUE)
            .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(titlePanelLayout.createSequentialGroup()
                    .addGap(0, 364, Short.MAX_VALUE)
                    .addComponent(titleLabel)
                    .addGap(0, 364, Short.MAX_VALUE)))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
            .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(titlePanelLayout.createSequentialGroup()
                    .addGap(0, 11, Short.MAX_VALUE)
                    .addComponent(titleLabel)
                    .addGap(0, 12, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 720;
        gridBagConstraints.ipady = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        add(titlePanel, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("Author");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 230;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 10);
        add(jPanel2, gridBagConstraints);

        titleList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        titleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        titleList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                titleListValueChanged(evt);
            }
        });
        titleListScrollPane.setViewportView(titleList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 513;
        gridBagConstraints.ipady = 175;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        add(titleListScrollPane, gridBagConstraints);

        bookTitleLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        bookTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bookTitleLabel.setText("Title");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bookTitleLabel)
                .addContainerGap(503, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(bookTitleLabel))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 493;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        add(jPanel1, gridBagConstraints);

        authorList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        authorList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        authorList.setToolTipText("");
        authorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                authorListValueChanged(evt);
            }
        });
        authorListScrollPane.setViewportView(authorList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 175;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 10);
        add(authorListScrollPane, gridBagConstraints);

        browseButtonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        informationButton.setMnemonic(KeyEvent.VK_V);
        informationButton.setText("<html><u>V</u>iew Book Information");
        informationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informationButtonActionPerformed(evt);
            }
        });

        exitButton.setMnemonic(KeyEvent.VK_X);
        exitButton.setText("<html>E<u>x</u>it");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        sortByButtonGroup.add(sortByTitleRadioButton);
        sortByTitleRadioButton.setSelected(true);
        sortByTitleRadioButton.setText("Title");
        sortByTitleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByTitleRadioButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setText("Sort and Search By: ");

        sortByButtonGroup.add(sortByAuthorRadioButton);
        sortByAuthorRadioButton.setText("Author");
        sortByAuthorRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByAuthorRadioButtonActionPerformed(evt);
            }
        });

        addButton.setMnemonic(KeyEvent.VK_A);
        addButton.setText("Add Book");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        searchButton.setMnemonic(KeyEvent.VK_S);
        searchButton.setText("<html><u>S</u>earch Library");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        removeButton.setMnemonic(KeyEvent.VK_R);
        removeButton.setText("<html><u>R</u>emove Book");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout browseButtonPanelLayout = new javax.swing.GroupLayout(browseButtonPanel);
        browseButtonPanel.setLayout(browseButtonPanelLayout);
        browseButtonPanelLayout.setHorizontalGroup(
            browseButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, browseButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(sortByTitleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortByAuthorRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(informationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        browseButtonPanelLayout.setVerticalGroup(
            browseButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(browseButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(informationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortByAuthorRadioButton)
                    .addComponent(sortByTitleRadioButton)
                    .addComponent(jLabel1)
                    .addComponent(addButton)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 11, 10);
        add(browseButtonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Keeps the List of authors synchronized with titles.
     * @param evt 
     */
    private void titleListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_titleListValueChanged
        authorList.setSelectedIndex(titleList.getSelectedIndex());
        authorList.ensureIndexIsVisible(authorList.getSelectedIndex());
    }//GEN-LAST:event_titleListValueChanged

    /**
     * Keeps the List of titles synchronized with authors.
     * @param evt 
     */
    private void authorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_authorListValueChanged
        titleList.setSelectedIndex(authorList.getSelectedIndex());
        titleList.ensureIndexIsVisible(titleList.getSelectedIndex());
    }//GEN-LAST:event_authorListValueChanged

    /**
     * Saves and exits the program.
     * @param evt 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        frame.saveAndExit();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Refreshes the Lists sorted by titles in ascending order.
     * @param evt 
     */
    private void sortByTitleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByTitleRadioButtonActionPerformed
        if (sortByTitleRadioButton.isSelected()) {
            Library.sortAndSearchType = LibraryConstants.BY_TITLE;
        }
        frame.refreshLists();
    }//GEN-LAST:event_sortByTitleRadioButtonActionPerformed

    /**
     * Refreshes the Lists sorted by authors in ascending order.
     * @param evt 
     */
    private void sortByAuthorRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByAuthorRadioButtonActionPerformed
        if (sortByAuthorRadioButton.isSelected()) {
            Library.sortAndSearchType = LibraryConstants.BY_AUTHOR;
        }
        frame.refreshLists();
    }//GEN-LAST:event_sortByAuthorRadioButtonActionPerformed

    /**
     * Reacts to the View Information button being clicked.
     * @see viewBookInfo()
     * @param evt 
     */
    private void informationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informationButtonActionPerformed
        viewBookInfo();
    }//GEN-LAST:event_informationButtonActionPerformed
    /**
     * Sends necessary Book information out to be set up for viewing.
     */
    public void viewBookInfo() {
        if (titleList.getSelectedIndex() > -1 && titlesListModel.get(0) !=
                "The Library is empty!") {
            String bookData = frame.getBookData(titleList.getSelectedIndex());
            frame.showInfo(bookData);
        } else {
            JOptionPane.showMessageDialog(null, "You must select a book first!",
                    "Book Information Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
            
    /**
     * Displays the AddPanel.
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        frame.showPanel(LibraryConstants.ADD);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Reacts to search button being clicked.
     * @see searchLibrary()
     * @param evt 
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchLibrary();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Shows a dialog box for search input. Then searches the Library for 
     * the specified title or author.
     */
    public void searchLibrary() {
        String searchKey = "";
        String type;
        
        if (sortByAuthorRadioButton.isSelected()) {
            type = "author";
        } else {
            type = "title";
        }
        
        searchKey = JOptionPane.showInputDialog(null, "Please enter a " +
                type + " to search for:");
        
        if (searchKey != null) {
            displaySearchResults(frame.findBook(searchKey));
        }
        
    }
    /**
     * Reacts to remove book button being clicked.
     * @see removeBook()
     * @param evt 
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeBook();
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * Allows user to remove a book from their Library.
     * Validates with user that they wish the book to be removed first.
     * All removals are permanent.
     */
    public void removeBook() {
        int selection = JOptionPane.showConfirmDialog(null, 
                "This will permanently delete " +
                "the selected book. \nAre you sure you wish to continue?");
        
        if (selection == JOptionPane.OK_OPTION) {
            if (titleList.getSelectedIndex() >= 0) {
                frame.removeBook(titleList.getSelectedIndex());
            } else {
                JOptionPane.showMessageDialog(null, 
                        "You must select a book to remove first!",
                        "Deletion Error!", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * Displays the Book information of a Book if the search was successful.
     * Prompts user that there were no results otherwise.
     * @param index The index of the Book the user searched for.
     */
    private void displaySearchResults(int index) {
        titleList.setSelectedIndex(index);
        if(index < 0) {
            JOptionPane.showMessageDialog(null, "No results were found!",
                    "No Results!", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * Selects a random Book of a user specified type.
     * Then displays the Book Information screen on the Book chosen.
     */
    public void randomRead() {
        Random generator = new Random(new Date().getTime());
        String[] options = {"Fiction", "Non-Fiction"};
        LibraryConstants targetType = LibraryConstants.FICTION;
        LibraryConstants randomsType = null;
        int index = -1;
        int counter = 1;

        int selection =
                JOptionPane.showOptionDialog(this, "What type of book do you wish "
                + "to read?", "Random Book Selection",
                JOptionPane.OK_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (selection == 1) {
            targetType = LibraryConstants.NONFICTION;
        } else {
            targetType = LibraryConstants.FICTION;
        }
        //If there are books in the library, keep selecting random books until
        //it finds one of the correct type.
        if (titlesListModel.size() > 1) {
            do {
                index = generator.nextInt(titlesListModel.size() - 1);
                randomsType = frame.getType(index);
                counter++;
            } while (randomsType != targetType && counter <= titlesListModel.size());

            if (counter >= titlesListModel.size()) {
                JOptionPane.showMessageDialog(this, "Your Library does not "
                        + "contain a book of that type!", "Random Read Error!",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                titleList.setSelectedIndex(index);
                informationButton.doClick();
            }
        } else { //Handle if there is only one book or of the library is empty
            if (titlesListModel.getElementAt(0).equals("The Library is empty!")) {
                JOptionPane.showMessageDialog(this, "Your Library is empty!",
                        "Random Read Error", JOptionPane.ERROR_MESSAGE);
            } else {
                index = 0;
                randomsType = frame.getType(index);
                if (randomsType != targetType) {
                    JOptionPane.showMessageDialog(this, "Your Library does not "
                            + "contain a book of that type!", "Random Read Error!",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JList authorList;
    private javax.swing.JScrollPane authorListScrollPane;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JPanel browseButtonPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton informationButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JRadioButton sortByAuthorRadioButton;
    private javax.swing.ButtonGroup sortByButtonGroup;
    private javax.swing.JRadioButton sortByTitleRadioButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JList titleList;
    private javax.swing.JScrollPane titleListScrollPane;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}